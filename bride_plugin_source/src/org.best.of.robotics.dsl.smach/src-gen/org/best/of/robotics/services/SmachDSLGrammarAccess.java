/*
* generated by Xtext
*/

package org.best.of.robotics.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SmachDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PrimitivePackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitivePackage");
		private final Assignment cStatemachinesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatemachinesStateMachineParserRuleCall_0 = (RuleCall)cStatemachinesAssignment.eContents().get(0);
		
		//PrimitivePackage:
		//	statemachines+=StateMachine*;
		public ParserRule getRule() { return rule; }

		//statemachines+=StateMachine*
		public Assignment getStatemachinesAssignment() { return cStatemachinesAssignment; }

		//StateMachine
		public RuleCall getStatemachinesStateMachineParserRuleCall_0() { return cStatemachinesStateMachineParserRuleCall_0; }
	}

	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Test");
		private final Assignment cRosAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRosSTRINGTerminalRuleCall_0 = (RuleCall)cRosAssignment.eContents().get(0);
		
		//Test:
		//	ros=STRING;
		public ParserRule getRule() { return rule; }

		//ros=STRING
		public Assignment getRosAssignment() { return cRosAssignment; }

		//STRING
		public RuleCall getRosSTRINGTerminalRuleCall_0() { return cRosSTRINGTerminalRuleCall_0; }
	}

	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatemachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionclientsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionclientsActionClientParserRuleCall_3_0 = (RuleCall)cActionclientsAssignment_3.eContents().get(0);
		private final Assignment cServiceclientsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cServiceclientsServiceClientParserRuleCall_4_0 = (RuleCall)cServiceclientsAssignment_4.eContents().get(0);
		private final Assignment cActionsstatesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionsstatesActionStateParserRuleCall_5_0 = (RuleCall)cActionsstatesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//StateMachine:
		//	"statemachine" name=ID "{" actionclients+=ActionClient* serviceclients+=ServiceClient* actionsstates+=ActionState*
		//	"}";
		public ParserRule getRule() { return rule; }

		//"statemachine" name=ID "{" actionclients+=ActionClient* serviceclients+=ServiceClient* actionsstates+=ActionState* "}"
		public Group getGroup() { return cGroup; }

		//"statemachine"
		public Keyword getStatemachineKeyword_0() { return cStatemachineKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//actionclients+=ActionClient*
		public Assignment getActionclientsAssignment_3() { return cActionclientsAssignment_3; }

		//ActionClient
		public RuleCall getActionclientsActionClientParserRuleCall_3_0() { return cActionclientsActionClientParserRuleCall_3_0; }

		//serviceclients+=ServiceClient*
		public Assignment getServiceclientsAssignment_4() { return cServiceclientsAssignment_4; }

		//ServiceClient
		public RuleCall getServiceclientsServiceClientParserRuleCall_4_0() { return cServiceclientsServiceClientParserRuleCall_4_0; }

		//actionsstates+=ActionState*
		public Assignment getActionsstatesAssignment_5() { return cActionsstatesAssignment_5; }

		//ActionState
		public RuleCall getActionsstatesActionStateParserRuleCall_5_0() { return cActionsstatesActionStateParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ActionClientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionClient");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionClientKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAnameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActionnameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionnameSTRINGTerminalRuleCall_4_0 = (RuleCall)cActionnameAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cAtypeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cActiontypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cActiontypeSTRINGTerminalRuleCall_7_0 = (RuleCall)cActiontypeAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ActionClient:
		//	"ActionClient" name=ID "{" "aname:" actionname=STRING "," "atype:" actiontype=STRING "}";
		public ParserRule getRule() { return rule; }

		//"ActionClient" name=ID "{" "aname:" actionname=STRING "," "atype:" actiontype=STRING "}"
		public Group getGroup() { return cGroup; }

		//"ActionClient"
		public Keyword getActionClientKeyword_0() { return cActionClientKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"aname:"
		public Keyword getAnameKeyword_3() { return cAnameKeyword_3; }

		//actionname=STRING
		public Assignment getActionnameAssignment_4() { return cActionnameAssignment_4; }

		//STRING
		public RuleCall getActionnameSTRINGTerminalRuleCall_4_0() { return cActionnameSTRINGTerminalRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"atype:"
		public Keyword getAtypeKeyword_6() { return cAtypeKeyword_6; }

		//actiontype=STRING
		public Assignment getActiontypeAssignment_7() { return cActiontypeAssignment_7; }

		//STRING
		public RuleCall getActiontypeSTRINGTerminalRuleCall_7_0() { return cActiontypeSTRINGTerminalRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ServiceClientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ServiceClient");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceClientKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cServicenameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cServicenameSTRINGTerminalRuleCall_4_0 = (RuleCall)cServicenameAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSrvKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cServicesrvAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cServicesrvSTRINGTerminalRuleCall_7_0 = (RuleCall)cServicesrvAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ServiceClient:
		//	"ServiceClient" name=ID "{" "name:" servicename=STRING "," "srv:" servicesrv=STRING "}";
		public ParserRule getRule() { return rule; }

		//"ServiceClient" name=ID "{" "name:" servicename=STRING "," "srv:" servicesrv=STRING "}"
		public Group getGroup() { return cGroup; }

		//"ServiceClient"
		public Keyword getServiceClientKeyword_0() { return cServiceClientKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"name:"
		public Keyword getNameKeyword_3() { return cNameKeyword_3; }

		//servicename=STRING
		public Assignment getServicenameAssignment_4() { return cServicenameAssignment_4; }

		//STRING
		public RuleCall getServicenameSTRINGTerminalRuleCall_4_0() { return cServicenameSTRINGTerminalRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"srv:"
		public Keyword getSrvKeyword_6() { return cSrvKeyword_6; }

		//servicesrv=STRING
		public Assignment getServicesrvAssignment_7() { return cServicesrvAssignment_7; }

		//STRING
		public RuleCall getServicesrvSTRINGTerminalRuleCall_7_0() { return cServicesrvSTRINGTerminalRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ActionStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionstateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cClientKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cClientnameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cClientnameActionClientCrossReference_4_0 = (CrossReference)cClientnameAssignment_4.eContents().get(0);
		private final RuleCall cClientnameActionClientIDTerminalRuleCall_4_0_1 = (RuleCall)cClientnameActionClientCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cTransitionsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cTransitionsTransitionParserRuleCall_6_0_0 = (RuleCall)cTransitionsAssignment_6_0.eContents().get(0);
		private final Keyword cCommaKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ActionState:
		//	"actionstate" name=ID "{" "client:" clientname=[ActionClient] "," (transitions+=Transition* ",")? "}";
		public ParserRule getRule() { return rule; }

		//"actionstate" name=ID "{" "client:" clientname=[ActionClient] "," (transitions+=Transition* ",")? "}"
		public Group getGroup() { return cGroup; }

		//"actionstate"
		public Keyword getActionstateKeyword_0() { return cActionstateKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"client:"
		public Keyword getClientKeyword_3() { return cClientKeyword_3; }

		//clientname=[ActionClient]
		public Assignment getClientnameAssignment_4() { return cClientnameAssignment_4; }

		//[ActionClient]
		public CrossReference getClientnameActionClientCrossReference_4_0() { return cClientnameActionClientCrossReference_4_0; }

		//ID
		public RuleCall getClientnameActionClientIDTerminalRuleCall_4_0_1() { return cClientnameActionClientIDTerminalRuleCall_4_0_1; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//(transitions+=Transition* ",")?
		public Group getGroup_6() { return cGroup_6; }

		//transitions+=Transition*
		public Assignment getTransitionsAssignment_6_0() { return cTransitionsAssignment_6_0; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_6_0_0() { return cTransitionsTransitionParserRuleCall_6_0_0; }

		//","
		public Keyword getCommaKeyword_6_1() { return cCommaKeyword_6_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class TO_SPECIFYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TO_SPECIFY");
		private final Keyword cTO_SPECIFYKeyword = (Keyword)rule.eContents().get(1);
		
		//TO_SPECIFY:
		//	"TO_SPECIFY";
		public ParserRule getRule() { return rule; }

		//"TO_SPECIFY"
		public Keyword getTO_SPECIFYKeyword() { return cTO_SPECIFYKeyword; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOutcomeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOutcomeOUTCOMEParserRuleCall_0_0 = (RuleCall)cOutcomeAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateActionStateCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateActionStateIDTerminalRuleCall_2_0_1 = (RuleCall)cStateActionStateCrossReference_2_0.eContents().get(1);
		
		//Transition:
		//	outcome=OUTCOME "=>" state=[ActionState];
		public ParserRule getRule() { return rule; }

		//outcome=OUTCOME "=>" state=[ActionState]
		public Group getGroup() { return cGroup; }

		//outcome=OUTCOME
		public Assignment getOutcomeAssignment_0() { return cOutcomeAssignment_0; }

		//OUTCOME
		public RuleCall getOutcomeOUTCOMEParserRuleCall_0_0() { return cOutcomeOUTCOMEParserRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//state=[ActionState]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }

		//[ActionState]
		public CrossReference getStateActionStateCrossReference_2_0() { return cStateActionStateCrossReference_2_0; }

		//ID
		public RuleCall getStateActionStateIDTerminalRuleCall_2_0_1() { return cStateActionStateIDTerminalRuleCall_2_0_1; }
	}

	public class OUTCOMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OUTCOME");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSucceededKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPreemptedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAbortedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		////| PREEMPTED = "preempted" | ABORTED = "aborted"
		////MonitorTransition:
		////; OUTCOME:
		//	"succeeded" | "preempted" | "aborted";
		public ParserRule getRule() { return rule; }

		//"succeeded" | "preempted" | "aborted"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"succeeded"
		public Keyword getSucceededKeyword_0() { return cSucceededKeyword_0; }

		//"preempted"
		public Keyword getPreemptedKeyword_1() { return cPreemptedKeyword_1; }

		//"aborted"
		public Keyword getAbortedKeyword_2() { return cAbortedKeyword_2; }
	}
	
	
	private PrimitivePackageElements pPrimitivePackage;
	private TestElements pTest;
	private StateMachineElements pStateMachine;
	private ActionClientElements pActionClient;
	private ServiceClientElements pServiceClient;
	private ActionStateElements pActionState;
	private TO_SPECIFYElements pTO_SPECIFY;
	private TransitionElements pTransition;
	private OUTCOMEElements pOUTCOME;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmachDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.best.of.robotics.SmachDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PrimitivePackage:
	//	statemachines+=StateMachine*;
	public PrimitivePackageElements getPrimitivePackageAccess() {
		return (pPrimitivePackage != null) ? pPrimitivePackage : (pPrimitivePackage = new PrimitivePackageElements());
	}
	
	public ParserRule getPrimitivePackageRule() {
		return getPrimitivePackageAccess().getRule();
	}

	//Test:
	//	ros=STRING;
	public TestElements getTestAccess() {
		return (pTest != null) ? pTest : (pTest = new TestElements());
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}

	//StateMachine:
	//	"statemachine" name=ID "{" actionclients+=ActionClient* serviceclients+=ServiceClient* actionsstates+=ActionState*
	//	"}";
	public StateMachineElements getStateMachineAccess() {
		return (pStateMachine != null) ? pStateMachine : (pStateMachine = new StateMachineElements());
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}

	//ActionClient:
	//	"ActionClient" name=ID "{" "aname:" actionname=STRING "," "atype:" actiontype=STRING "}";
	public ActionClientElements getActionClientAccess() {
		return (pActionClient != null) ? pActionClient : (pActionClient = new ActionClientElements());
	}
	
	public ParserRule getActionClientRule() {
		return getActionClientAccess().getRule();
	}

	//ServiceClient:
	//	"ServiceClient" name=ID "{" "name:" servicename=STRING "," "srv:" servicesrv=STRING "}";
	public ServiceClientElements getServiceClientAccess() {
		return (pServiceClient != null) ? pServiceClient : (pServiceClient = new ServiceClientElements());
	}
	
	public ParserRule getServiceClientRule() {
		return getServiceClientAccess().getRule();
	}

	//ActionState:
	//	"actionstate" name=ID "{" "client:" clientname=[ActionClient] "," (transitions+=Transition* ",")? "}";
	public ActionStateElements getActionStateAccess() {
		return (pActionState != null) ? pActionState : (pActionState = new ActionStateElements());
	}
	
	public ParserRule getActionStateRule() {
		return getActionStateAccess().getRule();
	}

	//TO_SPECIFY:
	//	"TO_SPECIFY";
	public TO_SPECIFYElements getTO_SPECIFYAccess() {
		return (pTO_SPECIFY != null) ? pTO_SPECIFY : (pTO_SPECIFY = new TO_SPECIFYElements());
	}
	
	public ParserRule getTO_SPECIFYRule() {
		return getTO_SPECIFYAccess().getRule();
	}

	//Transition:
	//	outcome=OUTCOME "=>" state=[ActionState];
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	////| PREEMPTED = "preempted" | ABORTED = "aborted"
	////MonitorTransition:
	////; OUTCOME:
	//	"succeeded" | "preempted" | "aborted";
	public OUTCOMEElements getOUTCOMEAccess() {
		return (pOUTCOME != null) ? pOUTCOME : (pOUTCOME = new OUTCOMEElements());
	}
	
	public ParserRule getOUTCOMERule() {
		return getOUTCOMEAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
